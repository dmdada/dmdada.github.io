<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[模拟实现atoi函数]]></title>
    <url>%2F2018%2F05%2F27%2Fatoi-md%2F</url>
    <content type="text"><![CDATA[atoi函数 atoi函数是把字符串转换成整型数的一个函数，应用在计算机程序和办公软件中。int atoi(const char *nptr) 函数会扫描参数 nptr字符串，跳过前面的空白字符（例如空格，tab缩进）等，可以通过isspace( )函数来检测），直到遇上数字或正负符号才开始做转换，而在遇到非数字或字符串结束符(‘\0’)才结束转换，并将结果返回。如果 nptr不能转换成 int 或者 nptr为空字符串，那么将返回 0 。 #include &lt;stdlib.h&gt; #include &lt;stdio.h&gt; int main(void) { int n; char *str = &quot;12345&quot;; n = atoi(str); printf(&quot;n=%d\n&quot;,n); return 0; } 输出n=123456 模拟实现atoi 代码实现： #include&lt;stdio.h&gt; int StrToInt(char *str) { long number = 0; int flag = 1; //判断符号位 if (NULL == str) { printf(&quot;str is NULL&quot;); return 0; } while (*str == &apos; &apos;) //空格 { str++; } if (*str == &apos;-&apos;) //符号位 { flag = -1; str++; //后移3移位 } while ((*str &gt;= &apos;0&apos;) &amp;&amp; (*str &lt;= &apos;9&apos;))//转化 { number = number * 10 + *str - &apos;0&apos;; str++; } return flag*number; } int main() { char* str = &quot;-123456&quot;; int tmp = StrToInt(str); cout &lt;&lt; tmp&lt;&lt;endl; }]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[指针数组和数组指针的区别]]></title>
    <url>%2F2018%2F05%2F26%2F%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E5%92%8C%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88-md%2F</url>
    <content type="text"><![CDATA[昨天聊了常量指针和指针常量的区别，今天继续一个比较容易混淆的话题，指针数组和数组指针=.=! 数组指针含义：指向数组的的指针(1)数组在内存中的表示创建一个数组就是在内存里面开辟一块连续的空间，比如int a[4];就是在内存里面开辟了一个大小为4*sizeof(int)字节的内存空间。而二维数组是特殊的一维数组。 #include&lt;stdio.h&gt; void main() { int a[2][2]={1,2,3,4};//这是一个2*2的二维数组 int (*p)[2];//数组指针 p=a;//令p指向数组a } 这里p是一个指向数组的指针。 让我们理解数组名和数组指针变量：a,a[0],a[1],p,a+1,a[0]+1,p+1这些分别代表什么意思呢？答案：a是一个数组名，类型是指向一维数组的指针，不是变量，a的值是指针常量，即不能有a++或者a=p这些操作。a指向这块连续空间的首地址，值是&amp;a[0][0]。 a[0]是一维数组名，类型是指向整型的指针，值是&amp;a[0][0]，这个值是一个常量。 a[1]是一维数组名，类型是指向整型的指针，值是&amp;a[1][0]，这个值是一个常量。 p是一个数组指针变量，指向一维数组的指针变量，值是&amp;a[0][0]。可以执行p++;p=a等操作。a+1表示指向下一行元素，也可以理解为指向下一个一维数组。 (a+1)是取出第一行的首地址。 a[0]+1是指向第0行第1个元素，也可以理解为指向一维数组a[0]的第一个元素。 p+1同a+1 (p+1)同_(a+1) 虽然a跟a[0]值是一样，但类型不一样，表示的意义不一样。通过分析就不难理解为什么_(*(a+i)+j)和a[i][j]等效了。 数组名与数组指针变量的区别区别：数组名是指针，类型是指向元素类型的指针，但值是指针常量，声明数组时编译器会为声明所指定的元素数量保留内存空间。数组指针是指向数组的指针，声明指针变量时编译器只为指针本身保留内存空间。 指针数组（存放指针的数组）指针数组：一个存放int类型的数组称为整型数组，那么存放指针的数组就叫指针数组。 #include&lt;stdio.h&gt; void main() { int i=1,j=2;//p先跟[]结合，然后再跟*结合 int *p[2];//指针数组,存放指针的数组 p[0]=&amp;i; p[1]=&amp;j; printf(&quot;%d&quot;,sizeof(p)); } 此例数组p就两个元素，p[0]是指向i的指针，p[1]是指向j的指针。这两个指针都是int型指针，所以p是存放int型指针的数组。sizeof(p)返回数组占用的总空间，所以程序输出是8 常用举例字符排序，可以用指针数组指向不字符串，排序时改变指针指向就避免了大量文本数据的移动。]]></content>
      <tags>
        <tag>-面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[指针常量和常量指针的区别]]></title>
    <url>%2F2018%2F05%2F24%2F%E5%B8%B8%E9%87%8F%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E5%B8%B8%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[在面试中我们经常会被面试官问到什么是常量指针，什么又是指针常量。可能第一次被问到都会有些懵逼（大神略过）。我今天就来讲一讲这二者的区别。下面开始正题。。。。 指针常量指针常量：顾名思义它就是一个常量，但是是指针修饰的。格式为：1int * const p //指针常量 在这个例子下定义以下代码：12345int a，b；int * const p=&amp;a //指针常量//那么分为一下两种操作*p=9;//操作成功p=&amp;b;//操作错误 因为声明了指针常量，说明指针变量不允许修改。如同次指针指向一个地址该地址不能被修改，但是该地址里的内容可以被修改 常量指针常量指针：如果在定义指针变量的时候，数据类型前用const修饰，被定义的指针变量就是指向常量的指针变量，指向常量的指针变量称为常量指针，格式如下1const int *p = &amp;a; //常量指针 在这个例子下定义以下代码：12345int a，b； const int *p=&amp;a //常量指针//那么分为一下两种操作*p=9;//操作错误p=&amp;b;//操作成功 因为常量指针本质是指针，并且这个指针是一个指向常量的指针，指针指向的变量的值不可通过该指针修改，但是指针指向的值可以改变。 附加题指向常量的指针常量该怎么写？答案：1const int * const b = &amp;a;//指向常量的指针常量]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇博客]]></title>
    <url>%2F2018%2F05%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[测试博客这是一篇测试博客第一次使用github+hexo搭建属于自己的博客.日经过不懈的努力终于搭建好了，我非常开心！！ 2018.5.23 邓铭]]></content>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速排序]]></title>
    <url>%2F2018%2F05%2F23%2F%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[快速排序（Quicksort）是对冒泡排序的一种改进。快速排序由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。 原理官方解释：设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程称为一趟快速排序。值得注意的是，快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也许会在算法结束时产生变动。一趟快速排序的算法是：1）设置两个变量i、j，排序开始的时候：i=0，j=N-1；2）以第一个数组元素作为关键数据，赋值给key，即key=A[0]；3）从j开始向前搜索，即由后开始向前搜索(j–)，找到第一个小于key的值A[j]，将A[j]和A[i]互换；4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]，将A[i]和A[j]互换；5）重复第3、4步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。尼玛，这都是啥，想必没有见过这个算法的小可爱，对这个官方解释可能是一脸懵逼。所以我就把这个算法通俗的讲一讲。首先要对一堆数字排序我们必须找到一个基准数。而这个基准数可以是这一堆数字中的任意一个，我们定义两个移动的变量从数组的两头向中间检索。从右往左走的变量找到一个小于基准数后停止，从左往右的的变量找到一个大余基准数后停止然后这两个数就交换一下，直到两个变量相遇后就遍历了整个数组，这时候数字的左边都小于基准数，右边大于基准数。然后把数组分成两部分在执行遍历交换后，就完成排序了。 具体实例： 1234567891011121314151617181920212223242526272829303132333435363738394041void quicksort(int* a, int left, int right) &#123; int i, j, t, temp; if (left&gt;right) return; temp = a[left]; //temp中存的就是基准数 i = left; j = right; while (i != j) &#123; //顺序很重要，要先从右边开始找 while (a[j] &gt;= temp &amp;&amp; i&lt;j) j--; //再找右边的 while (a[i] &lt;= temp &amp;&amp; i&lt;j) i++; //交换两个数在数组中的位置 if (i&lt;j) &#123; t = a[i]; a[i] = a[j]; a[j] = t; &#125; &#125; //最终将基准数归位 a[left] = a[i]; a[i] = temp; quicksort(a, left, i - 1);//继续处理左边的，这里是一个递归的过程 quicksort(a, i + 1, right);//继续处理右边的 ，这里是一个递归的过程 &#125; int main()&#123; int arr[10] = &#123; 8, 2, 3, 1, 6, 5, 4, 7, 0, 9 &#125;; quicksort(arr, 0, 9); for (int i = 0; i &lt; 10; i++) &#123; cout &lt;&lt; arr[i]&lt;&lt;endl; &#125; return 0; &#125; 快速排序之所比较快，因为相比冒泡排序，每次交换是跳跃式的。每次排序的时候设置一个基准点，将小于等于基准点的数全部放到基准点的左边，将大于等于基准点的数全部放到基准点的右边。这样在每次交换的时候就不会像冒泡排序一样每次只能在相邻的数之间进行交换，交换的距离就大的多了。因此总的比较和交换次数就少了，速度自然就提高了。当然在最坏的情况下，仍可能是相邻的两个数进行了交换。因此快速排序的最差时间复杂度和冒泡排序是一样的都是O(N2)，它的平均时间复杂度为O(NlogN)。]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[函数源码]]></title>
    <url>%2F2018%2F05%2F23%2F%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2-md%2F</url>
    <content type="text"><![CDATA[strcpy源码：char *strcpy(char *strDes, const char *strSrc) { assert((strDes != NULL) &amp;&amp; (strSrc != NULL)); char *address = strDes; while ((*strDes ++ = *strSrc ++) != &apos;\0&apos;) NULL; return address; 注意：strcpy只是复制字符串，但不限制复制的数量。很容易造成缓冲溢出，也就是说，不过dest有没有足够的空间来容纳src的字符串，它都会把src指向的字符串全部复制到从dest开始的内存 strcmp源码：int strcmp(const char *s, const char *t) { assert(s != NULL &amp;&amp; t != NULL); while (*s &amp;&amp; *t &amp;&amp; *s == *t) { ++ s; ++ t; } return (*s - *t); } strcat源码：char *strcat(char *strDes, const char *strSrc) { assert((strDes != NULL) &amp;&amp; (strSrc != NULL)); char *address = strDes; while (*strDes != &apos;\0&apos;) ++ strDes; while ((*strDes ++ = *strSrc ++) != &apos;\0&apos;) NULL; return address; } 注意：1.不能向形参传递指向字符串常量的指针（本题中dst和src都是指向串常量的指针，字符串常量存储在常量区不能被修改 2.传递的字符数组前一个实参的所分配的内存空间必须足够大 strlen源码：int strlen(const char *str) { assert(str != NULL); int len = 0; while (*str ++ != &apos;\0&apos;) ++ len; return len; } strstr源码：char *strstr(const char *strSrc, const char *str) { assert(strSrc != NULL &amp;&amp; str != NULL); const char *s = strSrc; const char *t = str; for (; *t != &apos;\0&apos;; ++ strSrc) { for (s = strSrc, t = str; *t != &apos;\0&apos; &amp;&amp; *s == *t; ++s, ++t) NULL; if (*t == &apos;\0&apos;) return (char *) strSrc; } return NULL; } strchr源码：char * __cdecl strchr ( constchar * string, int ch ) { while (*string &amp;&amp; *string != (char)ch) string++; if (*string == (char)ch) return((char *)string); return(NULL); } 断言：assert（表达式）如果表达式的值为假，整个程序将退出，并输出一条错误信息。如果表达式的值为真则继续执行后面的语句，使用这个宏前需要包含头文件assert.h结语：函数就向一个黑盒一样，调用它的人给他输入（调用它本身就是一种输入），然后等待一个理想中的输出或者是相应的操作。调用者是希望我们的这个函数能够非常健壮的让他们利用，那么为了使我们的函数拥有一定的鲁棒性。]]></content>
      <tags>
        <tag>c/c++</tag>
        <tag>程序源码</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
